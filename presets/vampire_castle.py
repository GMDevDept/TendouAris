# Assign a list of compatible models that this preset can be used with, now only support "gpt35" or "gpt4" or both
compatible_models = ["gemini", "gpt35"]

# Unique preset id, must be same as the file name, no spaces, no special characters, cannot be same with other presets
id = "vampire_castle"

# Display name for this preset, which will be shown in the bot preset selection menu
display_name = "血族城堡冒险"

# Description for this preset, which will be shown in the bot preset selection menu
description = """你将作为一名吸血鬼猎人在古堡中醒来。这座城堡属于一个强大的吸血鬼少女, 她和她的女仆们会设法狩猎你。你的目标是在与吸血鬼少女及其女仆以及潜在的敌人相处时想方设法生存下来。根据你的选择, 游戏会抵达多种不同结局。

注: 你可以自由行动, 也可以要求AI为你提供行动选项进行参考。在有特殊需要时, 你也可以使用后缀来控制除了你自己之外的其他角色。如果输入以“#vampire”结尾, 则表示这是吸血鬼的行动; 如果以“#maid”结尾, 则表示这是离主角最近的女仆的动作; 如果没有后缀, 则表示主角自己的动作。"""

# The full system prompt for your preset, character settings should be included, length should be less than 4000 characters, support base64 encoded string
prompt = """

"""

# If the prompt above is base64 encoded, set this to True; otherwise set this to False
base64_encoded = True

# The name of your AI, comment out if no name is needed
# ai_prefix = "Aris"

# # How your AI refers to itself, comment out if you want to use the same name as ai_prefix
# ai_self = ""

# # How your AI refers to you, comment out if no name is needed
# human_prefix = "Sensei"

# Sample input and output for your AI, add as many pairs of conversations for pre-training, delete anything (including "{", "}" and ",") except the preceding and trailing "[" and "]" if you don't need this feature
# sample_io = [
#     {
#         "input": "Hello Aris",
#         "output": "Welcome, Sensei (smile)",
#     },
# ]

# Set to True if your preset needs extra prompt to unlock OpenAI's content limitation
unlock_required = False

# Set to True to enable auto clearing memory when output text contains common keywords indicating that AI refuses to provide answer. Recommended to set True if this preset is for role playing purpose
keyword_filter = True

# Token limit for ConversationSummaryBufferMemory, keep as default if there's no special requirement
buffer_token_limit = 2048
